// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 12, 30, 7, 3, 17, 218973765, time.UTC),
		},
		"/index.gohtml": &vfsgen۰CompressedFileInfo{
			name:             "index.gohtml",
			modTime:          time.Date(2019, 12, 29, 21, 18, 16, 195000000, time.UTC),
			uncompressedSize: 3214,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\x53\x3b\xa0\xc5\x2c\x51\x76\xbb\xbe\x38\x92\xf7\xd2\x6d\x68\x81\x04\x18\xd2\x75\x5f\x03\x5a\x3c\x4b\x6c\x28\x52\x25\xcf\x89\x5d\x21\xff\x7d\xa0\x5e\x12\xcb\x4e\x94\x6e\x98\xf4\x21\xe1\x73\x7c\x9e\x7b\xee\x4e\x64\x90\xe4\x3b\x61\x32\xda\x55\x08\x05\x95\x6a\x39\x49\xfc\x0f\x50\x5c\xe7\x69\x80\x3a\xf0\x00\x72\xb1\x9c\x00\x24\x25\x12\x87\xac\xe0\xd6\x21\xa5\xc1\x86\xd6\xe1\x9b\xe0\x2e\x50\x10\x55\x21\x7e\xd9\xc8\xab\x34\xd8\x86\x1b\x1e\x66\xa6\xac\x38\xc9\x95\xc2\x00\x32\xa3\x09\x35\xa5\x81\xc4\x14\x45\x8e\x2d\x8f\x24\x29\x5c\x9e\xe3\x97\x0d\x3a\x82\xdf\x70\xb5\xc9\x73\xb4\x09\x6b\xf1\x5b\x65\xcd\x4b\x4c\x83\x2b\x89\xd7\x95\xb1\xb4\x27\x76\x2d\x05\x15\xa9\xc0\x2b\x99\x61\xd8\x2c\xa6\x20\xb5\x24\xc9\x55\xe8\x32\xae\x30\x9d\xb5\x89\x94\xd4\x97\x60\x51\xa5\x81\xcc\x8c\x0e\xc0\xc9\xaf\xe8\xd2\x60\xf6\x76\xbe\x9d\xbd\x9d\x07\x50\x58\x5c\xa7\x81\xaf\xc0\x2d\x18\xcb\x84\xfe\xec\xa2\x4c\x99\x8d\x58\x2b\x6e\x31\xca\x4c\xc9\xf8\x67\xbe\x65\x4a\xae\x1c\x2b\x39\xa1\xf5\x29\x04\x3a\x99\xeb\xd0\x4b\x3a\xf6\x22\x8a\xa3\x19\x93\x25\xcf\x91\xcd\xb6\x17\xd7\xb8\x62\x32\xbb\xb8\x5e\x5d\x34\x3a\xbb\x8b\xeb\x42\x12\x5e\xbc\x7c\x23\xaa\xa8\xd2\xf9\xa1\x2d\x57\x18\x4b\xd9\x86\xa0\xf5\x37\xf4\xd3\x27\x8c\xa4\x61\x8e\x38\xc9\xac\xcd\xe3\x98\x93\x65\xa5\x30\x54\x15\x5b\xf3\xab\xd6\x87\xef\xba\xd1\xa8\xc9\x85\xaf\xe7\xdb\xd7\xf3\x2e\xdb\x41\x3a\xda\x29\x74\x05\x22\x05\x13\xe8\x9e\x7f\xd5\x03\x6d\x6c\xc9\x95\xfc\x8a\xec\x55\x14\x47\xf1\xdd\x3a\x2a\xa5\x8e\x32\xe7\xf6\x0a\x1c\x0a\xaf\x8d\x26\x17\xe5\xc6\xe4\x0a\x79\x25\x5d\x23\x9c\x39\xf7\xd3\x9a\x97\x52\xed\xd2\x73\xb3\x32\x64\x16\x2f\xe2\x78\xfa\x32\x8e\xa7\x3f\xc6\xf1\xf4\x75\x1c\x07\x47\xbe\x1f\xd2\xdf\xe8\xea\x32\x6f\x44\x6f\xe7\xb4\xd7\x92\x6b\x5c\xfd\xac\x38\xa1\x23\x26\xa4\xa3\x87\xf6\xdc\x56\x31\x92\xf6\x30\xf2\x2d\x75\xfa\x11\xf5\x85\x9e\x75\xa9\x7f\xf8\xe0\xe7\xe6\x0f\x5a\x23\xe6\x13\xac\x8c\xd8\x41\xdd\x4c\x66\xc5\xb3\xcb\xdc\x9a\x8d\x16\x61\x66\x94\xb1\x0b\x78\xb2\x7e\xe3\xdf\x93\x26\xec\xb3\x84\xad\xe0\x02\x82\xb6\x77\xc1\x09\xc0\x04\xe0\xc6\xcf\xbc\x98\x4d\xa1\x98\x77\x5a\xbd\xc0\x3c\xf6\xef\xc9\x43\xfa\xa2\x79\xda\x30\xe1\x96\x42\xae\x64\xae\x17\x90\xa1\x26\xb4\x27\x8d\x34\x40\x05\x75\x4f\x78\x15\xfb\xf7\xc4\xa3\xc4\x57\x0a\x0f\xd2\x75\xe1\x8e\xe7\xcf\x28\x89\xbe\x3a\x63\x05\xda\x70\x65\x88\x4c\xb9\x80\x59\xb5\x05\x67\x94\x14\xf0\xe4\x6d\xec\xdf\x96\x94\xb0\xae\x33\x09\x6b\xef\xa2\xc4\x37\x68\x39\x81\xe6\xab\x76\x98\x91\x34\x1a\x32\xc5\x9d\x4b\x03\xbf\x03\x6d\x33\x27\x80\xa4\x98\xdd\x73\xbd\x14\xb3\x66\x8a\xac\x63\x2e\xf7\x54\x9a\xdf\x8b\xf9\x32\x71\x64\x8d\xce\x7b\xb2\x77\xd0\xac\x13\x56\xcc\x3b\xe9\xa6\xd4\x65\x77\x7c\x12\xb2\xcb\x84\xc4\xf2\x0c\xa9\x30\x22\x61\x24\x9a\x65\x5d\x47\x2d\x72\x73\xd3\x62\x8c\xec\x21\xe5\xd3\xf9\xe9\xfe\xfe\x4f\xe7\xa7\x23\x9b\xff\xb4\x86\xcc\xde\x76\x88\x1a\x04\x1e\xa3\x9c\xf1\xcf\xc6\x1e\xf3\x1a\xf8\x71\xb2\xd4\xf7\x92\x3d\x3c\x46\xfe\xd5\x88\xdd\x80\xe6\x81\x31\xc2\xbb\xf6\x62\x3f\x45\x9d\x53\x31\x60\x0e\x22\x63\x12\x7f\x59\xae\xdd\x1a\xed\xef\x3a\x33\x42\xea\x7c\xa0\x72\x18\x1c\xf5\xa2\x8c\xc3\xa1\x07\x8f\x8c\x51\xde\x1b\xff\xa5\xec\x31\x3c\x30\x46\xf8\xc3\xd8\x72\x40\xf0\xc0\xe8\x38\x8c\xa3\x23\x52\x0f\x8e\x11\xcf\x36\x8a\x64\xc5\xed\x31\x7b\x10\x79\xa4\xb3\x52\xa1\x3d\x6c\xa8\xc7\xc6\x68\xe7\x58\x1a\xc2\x5f\x84\x18\x32\xef\xe0\x71\x72\x73\xfc\x3e\x9d\x7f\x38\x20\xf7\xf0\xa8\xe1\xd3\x8f\x43\xb3\xa7\x1f\x47\x07\xce\x75\x86\x6a\x38\xf1\x06\x1a\x37\xe8\x2a\xa3\x0f\x3e\x94\x1e\x3c\x26\x26\xec\xf6\xd6\x18\x5c\x3f\x93\x91\x2b\xe8\x7d\x73\xa1\xb9\x47\xae\xa0\xba\x06\xcb\x75\x8e\xf0\xf4\x12\x77\x53\x78\x7a\xc5\xd5\x06\x61\x91\x42\xd4\xf2\xe1\xe6\xa6\xb3\x5e\xd7\x20\xd7\xf0\x8c\x6b\x01\xcf\x74\xbb\x1f\x82\x77\xc6\x5c\x4a\x0c\x9e\xef\x41\x59\x0f\x3d\xbf\xe3\xde\x15\xde\xbb\xab\xeb\x76\xbb\x2f\xf5\xd6\x20\x89\xe5\x1e\x61\x6f\x51\xd7\x9d\x49\xa9\x35\xda\x0f\x5a\xe0\x76\xda\x2d\xfe\xee\x0d\x77\xd6\xf7\x72\x36\x9e\x2b\x2b\x35\xad\x21\xf8\xfe\x0a\x82\x01\x65\x6f\x63\x5d\x03\x6a\x31\x28\x75\xb0\xbe\x1b\xc4\x30\x72\xff\x58\x46\x66\xd2\xb6\xeb\x7f\x9f\x89\xb1\xf0\x0c\xbf\x1c\x8d\xe4\x16\xba\x7f\x24\xff\xb5\xa9\xfd\x28\xc7\x9b\x7b\xf4\xe9\x3f\xde\xe6\x6f\xef\x70\xc2\xda\xbf\xe4\x09\x6b\xff\xf9\x98\xfc\x13\x00\x00\xff\xff\xce\x43\x5f\x9f\x8e\x0c\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.gohtml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
